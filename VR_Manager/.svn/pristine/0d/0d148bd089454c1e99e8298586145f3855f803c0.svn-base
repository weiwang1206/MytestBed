package com.testbed.database;

import java.io.PrintWriter;
import java.lang.reflect.Proxy;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javassist.NotFoundException;

import javax.servlet.ServletContext;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

import com.resultFilter.ResultFilter;
import com.testbed.Authorization;
import com.testbed.Experiment;
import com.testbed.Operation;
import com.testbed.Permission;
import com.testbed.PhyMachine;
import com.testbed.Port;
import com.testbed.RouterTableItem;
import com.testbed.TestBedFactory;
import com.testbed.TestBedFactoryProxyHandler;
import com.testbed.TestBedTopologyXML;
import com.testbed.User;
import com.testbed.UserManager;
import com.testbed.VirtualRouter;
import com.testbed.cache.DatabaseCacheManager;

public class DbTestBedFactory implements TestBedFactory{
	private volatile static Object initLock = new Object();
	private static DbTestBedFactory factory = null;
	private static String className = "com.VR_Manager.database.DbTestBedFactory";
	
	// the topology xml of the testbed.
	private TestBedTopologyXML topologyXML;
	
	private UserManager userManager;
	private DatabaseCacheManager cacheManager;
	private DbPermissionManager permissionManager;
	
	private ArrayList<Integer> pmIDs = new ArrayList<Integer>();
	private ArrayList<Integer> expIDs = new ArrayList<Integer>();
	
	private static SessionFactory sessionFactory;
	
	
	  /** 初始化Hibernate，创建SessionFactory实例 */
	  static{
	    try{
	      // 根据默认位置的Hibernate配置文件的配置信息，创建一个Configuration实例
	      Configuration config = new Configuration().configure();
	      //加载DbExperiment类的对象-关系映射文件

	      config.addClass(DbExperiment.class)
	      		.addClass(DbPhyMachine.class)
	      		.addClass(DbUser.class)
	      		.addClass(DbPort.class)
	      		.addClass(DbOperation.class)
	      		.addClass(DbRouterTableItem.class)
	      		.addClass(DbVirtualRouter.class)
	      		.addClass(DbTestBedTopologyXML.class)
	      		;


	      // 创建SessionFactory实例 */
	      sessionFactory = config.buildSessionFactory();
	    }catch(RuntimeException e){e.printStackTrace();throw e;}
	  }
	  
	private DbTestBedFactory() {
		
		cacheManager = new DatabaseCacheManager(this);
		userManager = new DbUserManager(this);
		permissionManager = new DbPermissionManager(this);
	}
	
	public static TestBedFactory getInstance(Authorization authorization) {
		if (authorization== null) {
			return null;
		}
		if (factory == null) {
			synchronized (initLock) {
				if (factory == null) {
					factory = new DbTestBedFactory();
				}
			}
		}
		/*
		return (TestBedFactory)Proxy.newProxyInstance(DbTestBedFactory.class.getClassLoader(), 
				DbTestBedFactory.class.getInterfaces(), 
				new TestBedFactoryProxyHandler(factory, factory.getPermission(authorization),
						authorization));*/
		return (TestBedFactory)factory;
	}

	public TestBedTopologyXML getTopologyXML() {
		// TODO Auto-generated method stub
		if (topologyXML == null) {
			try {
				topologyXML = new DbTestBedTopologyXML(this);
			} catch (NotFoundException e) {
				// TODO Auto-generated catch block
				return null;
			}
		}
		return topologyXML;
	}
	
	public Experiment createExperiment(User user, String expName,
			String description, String topo,
			int vrH, int vrL, ArrayList<Integer> HCID,ArrayList<Integer> LCID,String config) {
		// TODO Auto-generated method stub
		/**
		 * Check if this expName has been used by this user before.
		 * If the name has already been used, return null; 
		 */
		int expID = user.getExpIDByName(expName);
		if (expID == -1) {
			System.out.println("This experiment name exists!");
			return null;
		}
		
		/**
		 * This name is valid, create an experiment.
		 */
		return new DbExperiment(user, expName, description, topo,
				vrH, vrL, HCID,LCID,config, this);
	}

	
	public PhyMachine createPM(int expID, String ip, String description, String code) {
		// TODO Auto-generated method stub
		/**
		 * Check if this code has been used before.
		 * If the code has already been used, return null; 
		 */
		PhyMachine newPM = getPM(code);
		if (newPM != null) {
			System.out.println("This PhyMachine code exists!");
			return null;
		}
		
		/**
		 * This code is valid, create a PhyMachine.
		 */
		newPM = new DbPhyMachine(expID, code, description, ip, this);
		return newPM;
	}



	
	public Port createProt(VirtualRouter vr, int code, String ip, String ospf) {
		// TODO Auto-generated method stub
		return new DbPort(vr, code, ip, ospf, this);
	}

	
	public RouterTableItem createRouterItem(String code, String desIP,
			String nextHop, String portInterface) {
		// TODO Auto-generated method stub
		return new DbRouterTableItem(code, desIP, nextHop, portInterface, this);
	}

	
	public Experiment getExp(int expID) {
		// TODO Auto-generated method stub
		try {
			return factory.cacheManager.experimentCache.get(expID);
		} catch (NotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}

	
	public void deleteExp(Experiment exp) {
		// TODO Auto-generated method stub
		
	}

	
	public Iterator exps(ResultFilter filter) {
		// TODO Auto-generated method stub

		List<Integer> IDBlock = getIDBlock(filter);


		
        return new DatabaseObjectIterator(TestBedGlobals.EXPERIMENT, 
        		IDBlock.toArray(), this);


	}

	
	public PhyMachine getPM(int pmID) {
		// TODO Auto-generated method stub
		try {
			return factory.cacheManager.phyMachineCache.get(pmID);
		} catch (NotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("NotFoundException pm");
			return null;
		}
	}
	
	public PhyMachine getPM(String pmCode) {
		// TODO Auto-generated method stub
		// Read from the database
		return null;
	}

	
	public void deletePM(PhyMachine pm) {
		// TODO Auto-generated method stub
		
	}

	
	
	public Iterator pms(ResultFilter filter){
		// TODO Auto-generated method stub
		List<Integer> IDBlock = getIDBlock(filter);
		
        return new DatabaseObjectIterator(TestBedGlobals.PHYMACHINE, 
        		IDBlock.toArray(), this);
	    
	}

	
	public UserManager getUserManager() {
		// TODO Auto-generated method stub
		return userManager;
	}
	
	/**
	 * Returns the VirtualRouter with the specified vrID.
	 * @param vrID  
	 * @return the VirtualRouter with the specified vrID.
	 */
	public VirtualRouter getVR(int vrID) {
		try {
			return factory.cacheManager.virtualRouterCache.get(vrID);
		} catch (NotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}
	
	
	/**
	 * Returns the Port with the specified portID.
	 * @param portID
	 * @return
	 */
	public Port getPort(int portID) {
		try {
			return factory.cacheManager.portCache.get(portID);
		} catch (NotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}
	
	
	/**
	 * Returns the routerItem with the specified routerItemID.
	 * @param routerItemID
	 * @return the routerItem with the specified routerItemID.
	 */
	public RouterTableItem getRouterItem(int routerItemID) {
		try {
			return factory.cacheManager.routerTableCache.get(routerItemID);
		} catch (NotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}
	
	/**
	 * Returns the operation with the specified operID.
	 * @param operID
	 * @return the operation with the specified operID.
	 */
	public Operation getOperatoin(int operID) {
		try {
			return factory.cacheManager.operationCache.get(operID);
		} catch (NotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}

	public DatabaseCacheManager getCacheManager() {
		return cacheManager;
	}

	public Operation createOperation(User user, Date date, String opeRecord,
			int expID) {
		// TODO Auto-generated method stub
		return new DbOperation(user, expID, date, opeRecord, this);
	}

	public Permission getPermission(Authorization authorization) {
		
		int userID = authorization.getUserID();
        return permissionManager.getUserPermissions(userID);
	}

	public int getExpCnt(ResultFilter filter) {
		// TODO Auto-generated method stub
		return getIDCnt(filter);
	}

	public int getPmCnt(ResultFilter filter) {
		// TODO Auto-generated method stub
		return getIDCnt(filter);
	}

	public Iterator vrs(ResultFilter filter) {
		// TODO Auto-generated method stub
		List<Integer> IDBlock  = getIDBlock(filter);
		
        return new DatabaseObjectIterator(TestBedGlobals.VIRTUALROUTER, 
        		IDBlock.toArray(), this);

	}

	public int getVrCnt(ResultFilter filter) {
		// TODO Auto-generated method stub
		return getIDCnt(filter);
	}

	public ArrayList<Integer> pmIDs(ResultFilter filter) {
		// TODO Auto-generated method stub
		List<Integer> IDBlock  = getIDBlock(filter);
		return (ArrayList<Integer>) IDBlock;
	}

	public VirtualRouter createVR(PhyMachine pm, Experiment exp, int vrCode,
			boolean type) {
		// TODO Auto-generated method stub
		return new DbVirtualRouter(pm, exp, type, vrCode, this);
	}

	public VirtualRouter createVR(int pmid, Experiment exp, int vrCode,
			boolean type) {
		// TODO Auto-generated method stub
		return new DbVirtualRouter(pmid, exp, type, vrCode, this);
	}
	
	public SessionFactory getSessionFactory() {
		return sessionFactory;
	}
	
	private int getIDCnt(ResultFilter filter) {
		Session session = factory.getSessionFactory().openSession(); //创建一个会话
		Transaction tx = null;
		int cnt = -1;
		try {
			
			tx = session.beginTransaction(); //开始一个事务
			System.out.println("tx");
			String hql = getIDListHQL(filter, true);
			System.out.println(hql);
			Query query=session.createSQLQuery(hql);
			System.out.println("query");
			String tmp = query.uniqueResult().toString();
			cnt = Integer.parseInt(tmp);
			System.out.println("cnt----------------------------->" + cnt);
	        tx.commit(); //提交事务
	        
		} catch (RuntimeException e) {
			System.out.println("catch");
			if (tx != null) {
				e.printStackTrace();
				tx.rollback();
			}
	    } finally {
	        session.close();
	        
	        return cnt;
	    }
	}
	
	private List<Integer> getIDBlock(ResultFilter filter) {
		Session session = factory.getSessionFactory().openSession(); //创建一个会话
		Transaction tx = null;
		List<Integer> results = new ArrayList<Integer>();
		List<Object> tmpList = new ArrayList<Object>();
		try {
			
			tx = session.beginTransaction(); //开始一个事务
			System.out.println("tx");
			String hql = getIDListHQL(filter, false);
			System.out.println(hql);
			Query query=session.createSQLQuery(hql);
			System.out.println("query");
			int startIndex = filter.getStartIndex();
			int maxResultCnt = filter.getNumResults();
			// 设置了开始行的行号
			if (startIndex != -1) {
				query.setFirstResult(startIndex);  
			}
	        
	        // 设置了开始总行数
	        if (maxResultCnt != ResultFilter.NULL_INT) {
	        	query.setMaxResults(maxResultCnt);  
	        }
	        tmpList = query.list(); 
	        tx.commit(); //提交事务
	        
		} catch (RuntimeException e) {
			System.out.println("catch");
			if (tx != null) {
				e.printStackTrace();
				tx.rollback();
			}
	    } finally {
	        session.close();
	        for (Iterator iter = tmpList.iterator(); iter.hasNext();){  
	        	Object obj = iter.next();
	        	System.out.println(obj.getClass());
	        	if (obj instanceof Integer) {
	        		results.add((Integer) obj);
	        	} else {
	        		//集合中的元素是2个长度对象的数组(因为select查询了id,time两个属性)  
	        		Object[] objList = (Object[])obj;  
		            //数据组中第一个元素是id,类型是int;第二个元素是time,类型是Date(因为select中是id(int),time(Date)顺序)  
		            results.add((Integer) objList[0]); 
	        	}
	            
	        }
	        
	        System.out.println("results--->" + results);
	        return results;
	    }
	}
	
	private String getIDListHQL(ResultFilter resultFilter, boolean countQuery) {
		int sortField = resultFilter.getSortField();
		int propertyCnt = resultFilter.getPropertyCount();
		// We'll accumlate the query in a StringBuffer.
        StringBuffer hql = new StringBuffer(80);
        if (!countQuery) {
        	hql.append("SELECT id");
        }
        else {
        	hql.append("SELECT count(1)");
        }
        
        // SELECT -- need to add value that we sort on
        if (!countQuery) {
            switch(sortField) {
                case TestBedGlobals.CODE :
                	hql.append(", Code");
                	break;
                case TestBedGlobals.CREATION_DATE :
                	hql.append(", expApplyTime");
                	break;
            }
        }
        
        // FROM -- values
        hql.append(" FROM ").append(resultFilter.getDatabase());
        
        // WHERE BLOCK
        hql.append(" WHERE 1=1");
        // Properties
        for (int i = 0; i < propertyCnt; i++) {
    		String column = TestBedGlobals.COLUMN[resultFilter.getPropertyName(i)];
    		hql.append(" and ")
    		.append(column)
    		.append(" = ")
    		.append(resultFilter.getPropertyValue(i).ordinal());
    	}
        
        // ORDER BY
        
        if (!countQuery && sortField != -1) {
        	hql.append(" ORDER BY ");
            switch(sortField) {
	            case TestBedGlobals.CODE :
	            	hql.append(" code");
	            	break;
	            case TestBedGlobals.CREATION_DATE :
	            	hql.append(" expApplyTime");
	            	break;
            }
            if (resultFilter.getSortOrder() == ResultFilter.DESCENDING) {
            	hql.append(" DESC");
            }
            else {
            	hql.append(" ASC");
            }
        }
        
        return hql.toString();
	}

}

